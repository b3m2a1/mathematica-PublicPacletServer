(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



RebuildServer::usage="Rebuilds the site in entirety";


Begin["`Private`"];


PublicPacletServer::badbld=
	"Local version of the server needed before building. \
Call PublicPacletServer[\"Clone\"] first.";


$ServerRebuildKeys=
	"Add"|"Build"|"Push"|"Test";


RebuildServer[do:{$ServerRebuildKeys..}:{"Add", "Build", "Push"},
	ops:OptionsPattern[]
	]:=
	If[StringQ@$Clone&&DirectoryQ@$Clone,
		Block[
			{
				res=<||>
				},
			If[MemberQ[do, "Add"],
				Monitor[
					res["Add"]=
						AddPaclets[
							FilterRules[{ops}, Options[AddPaclets]]
							],
					Internal`LoadingPanel["Adding paclets..."]
				];
			If[MemberQ[do, "Build"],
				Monitor[
					res["Build"]=
						BuildPages[
							FilterRules[{ops}, Options[BuildPages]]
							],
					Internal`LoadingPanel["Building pages..."]
					]
				];
			If[MemberQ[do, "Test"],
				TestServer[]
				];
			If[MemberQ[do, "Push"],
				Monitor[
					res["Push"]=
						PublicPacletServerPush[
							FilterRules[{ops}, Options[PublicPacletServerPush]]
							],
					Internal`LoadingPanel["Pushing to GitHub..."]
					]
				];
			res
			]
		],
	Message[PublicPacletServer::badbld];
	$Failed
	];
RebuildServer[
	do:$ServerRebuildKeys, 
	ops:OptionsPattern[]
	]:=
	RebuildServer[{do}, ops]


End[];



