(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



$ReviewQueueDir::usage="";
$BuildDir::usage="";


AddPaclets::usage="Adds the paclets in the review queue";
BuildPages::usage="Builds the pages";
TestServer::usage="Opens a test server";
PushGitHub::usage="Pushes the server to GitHub";


Begin["`Private`"];


$BuildDir=
	If[StringQ@$Clone&&DirectoryQ@$Clone,
		FileNameJoin@{$Clone, "build"},
		None
		];


$ReviewQueueDir=
	If[StringQ@$Clone&&DirectoryQ@$Clone,
		FileNameJoin@{$Clone, "ReviewQueue"},
		None
		];


(* ::Subsubsection::Closed:: *)
(*AddPaclets*)



(* ::Subsubsubsection::Closed:: *)
(*AttachLogMD*)



gitLogMDKV[key_, val_DateObject?DateObjectQ]:=
	"* "<>ToString[key]<>": "<>DateString[val, "DateTime"];
gitLogMDKV[key_, val_]:=
	"* "<>ToString[key]<>": "<>ToString[val];
gitLogMDLog[a:{__Association}]:=
	StringRiffle[
		"*** Commit: "<>#Commit<>" ***\n"<>
			StringRiffle[
				KeyValueMap[gitLogMDKV, KeyDrop[#, {"Message", "Commit"}]], 
				"\n"]&/@a, 
		"\n\n"
		];
gitLogMDBit[name_String, a:{__Association}]:=
	"<a id=\"`Name`\" style=\"width:0;height:0;margin:0;padding:0;\">&zwnj;</a>
## `Name`

`Log`

"~TemplateApply~
	<|
		"Log"->gitLogMDLog[a], 
		"Name"->name
		|>;
gitLogMD[a_Association]:=
	"# Git Commit Log

``
"~TemplateApply~StringRiffle[KeyValueMap[gitLogMDBit, a], "\n<hr/>\n"];


(* ::Text:: *)
(*
	Not quite there yet. 
	Should find way to attach association log for use in index.
*)



AttachLogMD[]:=
	Module[
		{
			fds=
				Normal@
					Git["FileHistory", 
						$PacletServerDir, 
						"*/*.paclet"
						],
			gitLogVals
			},
			gitLogVals=
				Values@*Merge[First@*First]/@
					GroupBy[
						Normal@fds,
							StringSplit[#[[1]] ,"/"|"-"][[2]]&->Last
						];
			Export[
				FileNameJoin@{$PacletServerDir, "content", "pages", "log.md"},
				gitLogMD[gitLogVals],
				"Text"
				]
			]


(* ::Subsubsubsection::Closed:: *)
(*AddPaclets*)



Options[AddPaclets]=
	Join[
		{
			"ExportGitLog"->True
			},
		Options[PacletServerAdd]
		];
AddPaclets[ops:OptionsPattern[]]:=
	Append[
		Map[
			Function[
				With[{psa=
					PacletServerAdd[$Clone, #, 
						FilterRules[{ops}, Options[PacletServerAdd]]
						]},
					CopyFile[#, 
						FileNameJoin@{$BuildDir, "last_build", FileNameTake[#]},
						OverwriteTarget->True
						]->
					(DeleteFile[#];psa)
					]
				],
			Join[
				PacletExecute["AutoGeneratePaclet", #]&/@
					Select[
						FileExistsQ[FileNameJoin[{#, "PacletInfo.m"}]]||
						FileExistsQ[FileNameJoin[{#, FileBaseName[#]<>".m"}]]||
						FileExtension[#]=="wl"||
						FileExtension[#]=="m"&
						]@
						FileNames[
							"*",
							$ReviewQueueDir
							],
				FileNames[
					"*.paclet",
					$ReviewQueueDir
					]
				]
			],
		If[TrueQ@OptionValue["ExportGitLog"],
			AttachLogMD[],
			Nothing
			]
		]


(* ::Subsubsection::Closed:: *)
(*BuildPages*)



Options[BuildPages]=
	Options[PacletServerBuild];
BuildPages[ops:OptionsPattern[]]:=
	PacletServerBuild[$PacletServerDir,
	 FilterRules[{ops}, Options[PacletServerBuild]]
	 ];


End[];



