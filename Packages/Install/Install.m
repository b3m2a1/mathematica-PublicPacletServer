(* ::Package:: *)

(* Autogenerated Package *)

(* ::Section:: *)
(*PublicPacletServer*)



BeginPackage["`Package`"];


SubmitPublicPaclet::usage=
  "Submits a paclet to the public paclet server for review";


CloneReviewQueue::usage=
  "Clones the review queue for to allow for easier manual submissions";


PublicPacletInstall::usage=
  "Installs a paclet from the public paclet server";


EndPackage[];


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*Set Up*)



(* ::Subsubsubsection::Closed:: *)
(*Constants*)



$PublicPacletServerURL=
  "https://raw.githubusercontent.com/paclets/PacletServer/master";


(* ::Subsubsubsection::Closed:: *)
(*Dependencies*)



PackageLoadPacletDependency["BTools`"]


<<BTools`Paclets`
<<BTools`External`


(* ::Subsubsubsection::Closed:: *)
(*Basic Messages*)



PublicPacletServer::noauth=
  "Public paclet server requires authentication with GitHub";


(* ::Subsubsection::Closed:: *)
(*Fork*)



(* ::Subsubsubsection::Closed:: *)
(*ForkedQ*)



PacletServerForkedQ[]:=
  With[{ghdat=GitHub["ListMyRepositories", "ImportedResult"]},
    If[!AssociationQ@ghdat, 
      Message[PublicPacletServer::noauth];
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*Fork*)



(* ::Subsubsection::Closed:: *)
(*SubmitPublicPaclet*)



(* ::Text:: *)
(*
	
	Should autodetect whether something is a paclet or not, package it up, then push it into the review queue via a clone and pull request.
	
	Requires GitHub authentication.
*)



Options[SubmitPublicPaclet]=
  {
    "Username"->Automatic,
    "Password"->Automatic
    };
SubmitPublicPaclet[paclet_, ops:OptionsPattern[]]:=
  Replace[PacletExecute["AutoGeneratePaclet", paclet],
    f_String?FileExistsQ:>
      GitHub["Clone"]
    ]


(* ::Subsubsection::Closed:: *)
(*PublicPacletInstall*)



setNonRemoteLocation[paclets:_Paclet,location_String]:=
  setNonRemoteLocation[{paclets},location][[1]];
setNonRemoteLocation[paclets:{___Paclet},location_String]:=
  Module[
    {
      loc,
      fullLoc,
      inRem=MemberQ[Stack[], PacletFindRemote]
      },
    fullLoc=
      If[StringMatchQ[location,"http*:*",IgnoreCase->True]||
          StringMatchQ[location,"file:*",IgnoreCase->True],
        location,
        ExpandFileName[location]
        ];
    Function[
      loc=PacletManager`Package`getPIValue[#,"Location"];
      If[loc===Null,
        Append[#,"Location"->fullLoc],
        If[inRem,#,#/.("Location"->_):>("Location"->#)]
        ]
      ]/@paclets
    ];


PublicPacletInstall[name_, ops:OptionsPattern[]]:=
  Block[
    {
      PacletManager`Package`setLocation=setNonRemoteLocation
      },
    PacletManager`PacletInstall[
      name,
      ops,
      "Site"->"http://paclets.github.io/PacletServer"
      ]
    ]


End[];



