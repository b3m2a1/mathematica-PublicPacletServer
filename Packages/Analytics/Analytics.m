(* ::Package:: *)

(* Autogenerated Package *)

$PageViewDataset::usage="";
UpdatePageViews::usage=
  "Gets the page view dataset from Google Analytics";
CreateAnalyticsImages::usage=
  "Creates the images that feed into the analytics notebook";


UpdateAnalytics::usage="";


Begin["`Private`"];


$PageViewDataset:=
  FileNameJoin@{$Clone, "analytics", "page_views.wl"};


(* ::Subsubsubsection::Closed:: *)
(*toTypeInterpreter*)



toTypeInterpreter["integer"]:=
  Floor@Map[Internal`StringToDouble, StringTrim[#]]&
toTypeInterpreter["float"]:=
  Map[Internal`StringToDouble, StringTrim[#]]&
toTypeInterpreter["quantity", base_, unit_]:=
  With[{conv=toTypeInterpreter[base]},
    Thread[Quantity[conv[#], unit]]&
    ];
toTypeInterpreter["time"]:=
  toTypeInterpreter["float", "Seconds"];
toTypeInterpreter["visitors"]:=
  toTypeInterpreter["integer", "People"];
toTypeInterpreter["string"]:=
  #&


(* ::Subsubsubsection::Closed:: *)
(*capitalize*)



capitalize[s_String]:=
  ToUpperCase[StringTake[s, {1}]]<>StringDrop[s, {1}];
capitalize[s:{__String}]:=
  MapThread[StringJoin, 
    {
      ToUpperCase@StringTake[s, {1}],
      StringDrop[s, {1}]
      }
    ];


(* ::Subsubsubsection::Closed:: *)
(*reportToDataset*)



reportToDataset[rep_]:=
  Module[
    {
      base=rep[[1]],
      colhead,
      coldat,
      dims,
      metrics,
      coldatdims,
      coldatmets
      },
    colhead=base["ColumnHeader"];
    coldat=base["Data", "Rows"];
    dims=capitalize@StringTrim[colhead["Dimensions"], "ga:"];
    metrics=
      {
        capitalize@StringTrim[Lookup[#, "Name"], "ga:"],
        ToLowerCase@Lookup[#, "Type"]
        }&@colhead["MetricHeader", "MetricHeaderEntries"];
    coldatdims=
      AssociationThread[dims,#]&/@Lookup[coldat, "Dimensions"];
    coldatmets=
      Transpose@Lookup[#, "Values"]&/@
        Transpose[Lookup[coldat, "Metrics"]];
    coldatmets=
      Map[AssociationThread[metrics[[1]],#]&]@
        Transpose@
          MapThread[
            #[#2]&,
            {
              Map[toTypeInterpreter, metrics[[2]]],
              #
              }
            ]&/@coldatmets;
    Dataset@MapThread[Join, {coldatdims, #}]&/@coldatmets
    ]


(* ::Subsubsection::Closed:: *)
(*params*)



$samplingRate=7; (* in days *)


(* ::Subsubsection::Closed:: *)
(*requestsToMake*)



requestsToMake//Clear
requestsToMake[lastPulled_, endDate_:Automatic]:=
  Module[
    {
      dateRange,
      baseRange
      },
    baseRange=
      DateRange[
        lastPulled, 
        Replace[endDate, Automatic:>Tomorrow], 
        Quantity[$samplingRate, "Days"]
        ];
    dateRange=
      Partition[
        Riffle[Most[baseRange], Rest[baseRange]-Quantity[1, "Days"]],
        2
        ];
    Partition[dateRange, UpTo[2]]
    ]


(* ::Subsubsection::Closed:: *)
(*getGoogleAnalyticsReport*)



getGoogleAnalyticsReport[startEnd_]:=
  GoogleAnalytics["GetReport", $AnalyticsID, "PageUserNumbers",
    "StartDate"->startEnd[[All, 1]],
    "EndDate"  ->startEnd[[All, 2]]
    ]["Reports"]


(* ::Subsubsection::Closed:: *)
(*pullGAReport*)



pullGAReport//Clear
pullGAReport[startDate_, endDate_:Automatic]:=
  Module[
    {
      requests, pulls
      },
    requests=requestsToMake[startDate, endDate];
    pulls=Map[getGoogleAnalyticsReport, requests];
    AssociationThread[
      Flatten[Interval@@@#&/@requests],
      Flatten[reportToDataset/@pulls]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*dateRefactorDataset*)



dateRefactorDataset[ds_]:=
  Merge[KeyDrop[Normal[#], "PagePath"], Total]&/@ds


(* ::Subsubsection::Closed:: *)
(*pageRefactorDataset*)



pageRefactorDataset[ds_]:=
  Merge[
    KeyValueMap[
      With[{interval=#, assocs=#2},
        Map[interval->#&, assocs]
        ]&,
      AssociationThread[
        Lookup[ Normal[#], "PagePath"],
        KeyDrop[Normal[#], "PagePath"]
        ]&/@ds
      ],
    Association
    ];


(* ::Subsubsection::Closed:: *)
(*makeDateListPlot*)



makeDateListPlot[dateRef_, ops:OptionsPattern[]]:=
  Append[{Quantity[7, "Days"]+Keys[dateRef][[-1, 1]], 0}]@
    Prepend[{Keys[dateRef][[1, 1]], 0}]@
      KeyValueMap[
        {#[[2]], #2["Users"]}&, 
        dateRef
        ]//
    DateListPlot[#,
      ops,
      FrameTicks->
        {
          {
            Map[
              {#, #, {.015, 0}}&,
              Floor@
                Subdivide[0, 
                  Max@#[[All, 2]], 
                  10
                  ]
              ], 
            None
            }, 
          {
            Map[
              {
                #, 
                RawBoxes@
                  AdjustmentBox[
                    ToBoxes@
                      Rotate[DateString[#, "ISODate"], \[Pi]/3, {-1, 1}], 
                    BoxBaselineShift->0,
                    BoxMargins->{{0, 3}, {0, 0}}
                    ]
                (*Graphics[
									{
										Select[
											Flatten@List@
												Lookup[Flatten@{ops}, FrameTicksStyle, {}],
											ColorQ
											],
										Text[
											Style[
												DateString[#, "ISODate"], 
												Lookup[Flatten@{ops}, FrameTicksStyle, 15]
												],
											{1, 2},
											{1, 1},
											{.5, 1}
											]
										},
									PlotRange\[Rule]{{0, 2.1}, {0, 2}},
									Method\[Rule]{"ShrinkWrap"\[Rule]True},
									ImageSize\[Rule]{65, 80},
									AspectRatio\[Rule]Full,
									Background\[Rule]Red,
									BaselinePosition\[Rule]Right
									]*),
                {.015, 0},
                {Alignment->Right}
                }&,
              #[[All, 1]][[
                Floor@Subdivide[1, Length@#, 8]
                ]]
              ],
             None
            }
          },
      FrameStyle->Black,
      FrameTicksStyle->Directive[Black, 15],
      PlotMarkers->
        Pane[
          Overlay[
            {Style["\[FilledSmallCircle]",25,  White], Style["\[EmptySmallCircle]", 25]}
            ],
          {35, 25},
          Alignment->{.2,  .6}
          ],
      PlotRange->{
          Rescale[{-.05, 1.05}, {0, 1}, MinMax@#[[All, 1]]],
          Rescale[{-.1, 1.05}, {0, 1}, MinMax@#[[All, 2]]]
          },
      PlotStyle->Directive[ColorData[97][1], Thick],
      FrameStyle->AbsoluteThickness[1.5]
      ]&;


(* ::Subsubsection::Closed:: *)
(*CreateAnalyticsImages*)



CreateAnalyticsImages[ds_]:=
  Module[
    {
      refactor,
      dref,
      totals,
      pacpages,
      mainPlot,
      structForms,
      maxPages,
      subplots,
      maxViews,
      imgDir,
      res={},
      userGrid
      },
    refactor=pageRefactorDataset[ds];
    totals=Merge[Values@#, Total]&/@refactor;
    dref=dateRefactorDataset[ds];
    structForms=
      {
        "",
        "categories.html", "authors.html", "tags.html", 
        "search.html", "tags", "authors", "categories", "pages", "index"
        };
    pacpages=
      KeySelect[totals,
        Length[URLParse[#]]>2&&
          !StringMatchQ[ URLParse[#, "Path"][[3]], structForms]&];
    mainPlot=
      makeDateListPlot[dref, 
        ImageSize->750,
        AspectRatio->.5,
        PlotLabel->"Paclet Server Users"
        ];
    imgDir=FileNameJoin@{$Clone, "content", "img", "analytics"};
    If[!DirectoryQ@imgDir, CreateDirectory[imgDir]];
    AppendTo[res, Export[FileNameJoin@{imgDir, "users.png"}, mainPlot]];
    maxPages=
      MaximalBy[pacpages, #Users&, 9];
    maxViews=
      Max@refactor[[Keys@maxPages, All, "Users"]];
    subplots=
      makeDateListPlot[refactor[#], 
        ImageSize->250,
        AspectRatio->.5,
        PlotLabel->
          StringReplace[
            StringTrim[URLParse[#, "Path"][[3]], ".html"],
            "serviceconnection"->"SC: "
            ],
        FrameTicks->{{Floor@Subdivide[0, maxViews, 4], None}, {None, None}},
        PlotRange->{{All, All}, Rescale[{-.1, 1.05}, {0, 1}, {0, maxViews}]},
        PlotMarkers->
          Pane[
            Overlay[
              {Style["\[FilledSmallCircle]",15,  White], Style["\[EmptySmallCircle]", 15]}
              ],
            {25, 15},
            Alignment->{.2,  .6}
            ]
        ]&/@Keys@maxPages;
    userGrid=
      Grid[
        Prepend[
          Partition[subplots, 3],
          {
            Show[mainPlot, 
              FrameTicks->
                Replace[
                  Lookup[Options[mainPlot], FrameTicks],
                  {{a_, b_}, {c_, d_}}:>
                    {{a, b}, {None, d}}
                  ]
              ], 
            SpanFromLeft
            }
          ],
        Spacings->{0, Automatic}
        ];
    AppendTo[res, Export[FileNameJoin@{imgDir, "user_grid.png"}, userGrid]]
    ];
CreateAnalyticsImages[]:=
  CreateAnalyticsImages@Get@$PageViewDataset;


(* ::Subsubsection::Closed:: *)
(*UpdatePageViews*)



UpdatePageViews//Clear
UpdatePageViews[endDate_:Automatic]:=
  Module[
    {
      current, startDate, dates, dsfile=$PageViewDataset,
      updates, new, dateGap
      },
    current=
      KeySortBy[First]@
        Replace[
          If[FileExistsQ@dsfile, Get@dsfile],
          Except[_?AssociationQ]:><||>
          ];
    dates=
      Switch[Length@current,
        0,
          {$Birthday, $Birthday},
        1,
          {$Birthday, Keys[current][[1, 1]]},
        _,
          Keys[current][[-2;;, 1]]
        ];
    dateGap=dates[[1]]-dates[[2]];
    startDate=
      If[dateGap<Quantity[$samplingRate, "Days"],
        dates[[2]],
        dates[[1]]
        ];
    updates=pullGAReport[startDate, endDate];
    new=
      KeySortBy[First]@
        Join[
          If[startDate==dates[[1]]||Length@current==0,
            current,
            Most@current
            ], 
          updates
          ];
    If[!DirectoryQ@DirectoryName[dsfile], 
      CreateDirectory[DirectoryName[dsfile], CreateIntermediateDirectories->True]
      ];
    Export[dsfile, new];
    new 
    ]


(* ::Subsubsection::Closed:: *)
(*UpdateAnalytics*)



UpdateAnalytics[]:=
  (
    UpdatePageViews[];
    CopyFile[
      FileNameJoin@{$Clone, "analytics", "page_views.wl"},
      FileNameJoin@{$Clone, "content", "analytics_dataset.wl"},
      OverwriteTarget->True
      ];
    CreateAnalyticsImages[];
    )


End[];



