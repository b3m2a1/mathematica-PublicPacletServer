(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



PublicPacletServer::usage=
	"Represents the public paclet server at https://github.com/paclets/PacletServer";


Begin["`Private`"];


Unprotect[PublicPacletServer];
Clear[PublicPacletServer];


(* ::Subsection:: *)
(*Load BTools*)



PackageLoadPacletDependency["BTools`"]


PackageExtendContextPath[
	{
		"BTools`",
		"BTools`External`",
		"BTools`Paclets`"
		}
	]


(* ::Subsection:: *)
(*Interface*)



(* ::Subsubsection::Closed:: *)
(*Command List*)



$ServerCommands=
	{
		"Repository",
		"RepositoryShort",
		"SiteURL",
		"Fork",
		"ForkedQ",
		"SubmitPaclet",
		"SubmitPullRequest",
		"Clone",
		"FindClone",
		"RebuildServer",
		"QueuedPaclets",
		"QueuedPullRequests"
		}


(* ::Subsubsection::Closed:: *)
(*Constants*)



(* ::Subsubsubsection::Closed:: *)
(*Repository*)



PublicPacletServer["Repository"]:=
	URL@$Repository;


(* ::Subsubsubsection::Closed:: *)
(*RepositoryShort*)



PublicPacletServer["RepositoryShort"]:=
	URLBuild@Normal@$Repository;


(* ::Subsubsubsection::Closed:: *)
(*URL*)



PublicPacletServer["SiteURL"]:=
	$URL;


(* ::Subsubsection::Closed:: *)
(*Fork*)



(* ::Subsubsubsection::Closed:: *)
(*ForkedQ*)



PublicPacletServer["ForkedQ"]:=
	ForkedQ[];


(* ::Subsubsubsection::Closed:: *)
(*Fork*)



PublicPacletServer["Fork"]:=
	Fork[]


(* ::Subsubsection::Closed:: *)
(*Clone*)



(* ::Subsubsubsection::Closed:: *)
(*Clone*)



PublicPacletServer["Clone"]:=
	Clone[]


(* ::Subsubsubsection::Closed:: *)
(*FindClone*)



PublicPacletServer["FindClone"]:=
	FindClone[]


(* ::Subsubsection::Closed:: *)
(*Submit*)



(* ::Subsubsubsection::Closed:: *)
(*SubmitPaclet*)



PublicPacletServer["SubmitPaclet", pacSpec_, ops:OptionsPattern[]]:=
	With[{res=SubmitPaclet[pacSpec, ops]},
		res/;Head[res]=!=SubmitPaclet
		]


(* ::Subsubsubsection::Closed:: *)
(*SubmitPullRequest*)



PublicPacletServer["SubmitPullRequest", 
	desc:_String|Automatic:Automatic, ops:OptionsPattern[]]:=
	With[{res=SubmitPullRequest[desc, ops]},
		res/;Head[res]=!=SubmitPullRequest
		]


(* ::Subsubsection::Closed:: *)
(*Queue*)



(* ::Subsubsubsection::Closed:: *)
(*QueuedPaclets*)



PublicPacletServer["QueuedPaclets", which:_String|Automatic:Automatic]:=
	QueuedPaclets[which];


(* ::Subsubsubsection::Closed:: *)
(*QueuedPullRequests*)



PublicPacletServer["QueuedPullRequests", which:_String|Automatic:Automatic]:=
	QueuedPullRequests[which];


(* ::Subsubsection::Closed:: *)
(*Build*)



(* ::Subsubsubsection::Closed:: *)
(*Rebuild*)



PublicPacletServer["Rebuild", arg:_String|{__String}, ops:OptionsPattern[]]:=
	With[{res=RebuildServer[arg, ops]},
		Null/;Head[res]=!=RebuildServer
		]


(* ::Subsubsubsection::Closed:: *)
(*AddPaclets*)



PublicPacletServer["AddPaclets", ops:OptionsPattern[]]:=
	With[{res=RebuildServer[{"Add"}, ops]},
		Null/;Head[res]=!=RebuildServer
		]


(* ::Subsubsubsection::Closed:: *)
(*BuildPages*)



PublicPacletServer["BuildPages", ops:OptionsPattern[]]:=
	With[{res=RebuildServer[{"Build"}, ops]},
		Null/;Head[res]=!=RebuildServer
		]


(* ::Subsection:: *)
(*Clean Up*)



(* ::Subsubsection::Closed:: *)
(*Autocomplete*)



PackageAddAutocompletions[
	PublicPacletServer,
	{
		$ServerCommands
		}
	]


(* ::Subsubsection::Closed:: *)
(*Protections*)



Protect[PublicPacletServer];


End[];



